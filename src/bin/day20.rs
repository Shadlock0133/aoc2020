use aoc2020::map::Map2D;

fn main() {
    let input = std::fs::read_to_string("inputs/day20.txt").unwrap();
    let thing = parse_input(&input);
    let res = check_1(&thing);
    println!("Part 1 - Answer: {}", res);
}

struct Photo {
    id: u32,
    image: Map2D,
}

fn parse_input(input: &str) -> Vec<Photo> {
    input
        .split("\n\n")
        .map(str::trim)
        .map(|x| {
            let nl = x.find('\n').unwrap();
            let (id, rest) = x.split_at(nl);
            let id = id
                .strip_prefix("Tile ")
                .unwrap()
                .strip_suffix(": ")
                .unwrap()
                .parse()
                .unwrap();
            let image = Map2D::from_str(rest);
            Photo { id, image }
        })
        .collect()
}

fn check_1(_thing: &[Photo]) -> usize {
    todo!()
}

#[cfg(test)]
mod tests {
    use super::*;

    const INPUT: &str = "Tile 2311:
        ..##.#..#.
        ##..#.....
        #...##..#.
        ####.#...#
        ##.##.###.
        ##...#.###
        .#.#.#..##
        ..#....#..
        ###...#.#.
        ..###..###
        
        Tile 1951:
        #.##...##.
        #.####...#
        .....#..##
        #...######
        .##.#....#
        .###.#####
        ###.##.##.
        .###....#.
        ..#.#..#.#
        #...##.#..
        
        Tile 1171:
        ####...##.
        #..##.#..#
        ##.#..#.#.
        .###.####.
        ..###.####
        .##....##.
        .#...####.
        #.##.####.
        ####..#...
        .....##...
        
        Tile 1427:
        ###.##.#..
        .#..#.##..
        .#.##.#..#
        #.#.#.##.#
        ....#...##
        ...##..##.
        ...#.#####
        .#.####.#.
        ..#..###.#
        ..##.#..#.
        
        Tile 1489:
        ##.#.#....
        ..##...#..
        .##..##...
        ..#...#...
        #####...#.
        #..#.#.#.#
        ...#.#.#..
        ##.#...##.
        ..##.##.##
        ###.##.#..
        
        Tile 2473:
        #....####.
        #..#.##...
        #.##..#...
        ######.#.#
        .#...#.#.#
        .#########
        .###.#..#.
        ########.#
        ##...##.#.
        ..###.#.#.
        
        Tile 2971:
        ..#.#....#
        #...###...
        #.#.###...
        ##.##..#..
        .#####..##
        .#..####.#
        #..#.#..#.
        ..####.###
        ..#.#.###.
        ...#.#.#.#
        
        Tile 2729:
        ...#.#.#.#
        ####.#....
        ..#.#.....
        ....#..#.#
        .##..##.#.
        .#.####...
        ####.#.#..
        ##.####...
        ##..#.##..
        #.##...##.
        
        Tile 3079:
        #.#.#####.
        .#..######
        ..#.......
        ######....
        ####.#..#.
        .#...#.##.
        #.#####.##
        ..#.###...
        ..#.......
        ..#.###...";

    #[test]
    #[ignore]
    fn test1() {
        let output = 20899048083289;
        let res = check_1(&parse_input(INPUT));
        assert_eq!(res, output);
    }
}
